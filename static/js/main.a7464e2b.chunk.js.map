{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["marked","require","setOptions","breaks","App","INITIAL_MARKDOWN","state","markdown","updateMarkdown","setState","this","console","log","className","id","type","placeholder","rows","value","onChange","event","target","style","border","borderRadius","contentEditable","dangerouslySetInnerHTML","__html","minHeight","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"yRAGIA,G,MAASC,EAAQ,KACrBD,EAAOE,WAAW,CAChBC,QAAQ,I,IA2EKC,E,4MAvEbC,iBACE,66B,EAEFC,MAAQ,CACNC,SAAU,EAAKF,kB,EAGjBG,eAAiB,SAAAD,GACf,EAAKE,SAAS,CACZF,c,uDAIM,IAAD,OACDA,EAAaG,KAAKJ,MAAlBC,SAEN,OADAI,QAAQC,IAAIL,GAEV,yBAAKM,UAAU,OACb,yBAAKA,UAAU,2BACb,wCACA,yBAAKA,UAAU,QACb,yBAAKA,UAAU,wBACb,wBAAIA,UAAU,wBAAd,UAEA,yBAAKA,UAAU,cACb,2BAAOA,UAAU,eACjB,8BACEC,GAAG,SACHC,KAAK,OACLF,UAAU,eACVG,YAAY,iBACZC,KAAK,KACLC,MAAOX,EACPY,SAAU,SAAAC,GAAK,OAAI,EAAKZ,eAAeY,EAAMC,OAAOH,SAEnDR,KAAKL,qBAKd,yBACEQ,UAAU,kBACVS,MAAO,CACLC,OAAQ,6BACRC,aAAc,WAGhB,yBAAKX,UAAU,OACb,wBAAIA,UAAU,aAAd,WACA,yBACEA,UAAU,yBACVS,MAAO,CACLC,OAAQ,6BACRC,aAAc,WAGhB,yBACEV,GAAG,UACHW,gBAAgB,OAChBC,wBAAyB,CAAEC,OAAQ3B,EAAOO,IAC1Ce,MAAO,CAAEM,UAAW,mB,GA7DpBC,aCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLpC,QAAQoC,MAAMA,EAAMC,c","file":"static/js/main.a7464e2b.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./App.css\";\n\nlet marked = require(\"marked\");\nmarked.setOptions({\n  breaks: true\n});\n\nclass App extends Component {\n  INITIAL_MARKDOWN =\n    \"# Markdown Text goes here\\n## You can also make subheadings\\n\\nOne of the **trickiest** parts of getting this project to work was learning how to use `dangerouslySetInnerHTML` to make the previewer display the output of [marked.js](https://github.com/markedjs/marked/blob/master/README.md) as HTML instead of a string.\\n\\nAccording to the React Documentation,\\n>dangerouslySetInnerHTML is React’s replacement for using innerHTML in the browser DOM. In general, setting HTML from code is risky because it’s easy to inadvertently expose your users to a cross-site scripting (XSS) attack.\\n\\nExample Code:\\n```\\nfunction createMarkup() {\\n  return {__html: 'First &middot; Second'};\\n}\\n\\nfunction MyComponent() {\\n  return <div dangerouslySetInnerHTML={createMarkup()} />;\\n}\\n```\\n\\nJust remember to:\\n- Search, Read, Ask\\n- Ask for help on the Forum (that's what worked for me.)\\n\\n![React Logo w/ Text](https://goo.gl/Umyytc)\\n\";\n\n  state = {\n    markdown: this.INITIAL_MARKDOWN\n  };\n\n  updateMarkdown = markdown => {\n    this.setState({\n      markdown\n    });\n  };\n\n  render() {\n    let { markdown } = this.state;\n    console.log(markdown);\n    return (\n      <div className=\"App\">\n        <div className=\"container py-3 bg-light\">\n          <h1>Markdown</h1>\n          <div className=\"card\">\n            <div className=\"card-body bg-warning\">\n              <h4 className=\"card-title text-left\">Editor</h4>\n\n              <div className=\"form-group\">\n                <label className=\"form-label\"></label>\n                <textarea\n                  id=\"editor\"\n                  type=\"text\"\n                  className=\"form-control\"\n                  placeholder=\"Enter Markdown\"\n                  rows=\"10\"\n                  value={markdown}\n                  onChange={event => this.updateMarkdown(event.target.value)}\n                >\n                  {this.INITIAL_MARKDOWN}\n                </textarea>\n              </div>\n            </div>\n          </div>\n          <div\n            className=\"my-5 bg-success\"\n            style={{\n              border: \"1px solid rgba(0,0,0,.125)\",\n              borderRadius: \".25rem\"\n            }}\n          >\n            <div className=\"p-2\">\n              <h4 className=\"text-left\">Preview</h4>\n              <div\n                className=\"p-2 text-left bg-white\"\n                style={{\n                  border: \"1px solid rgba(0,0,0,.125)\",\n                  borderRadius: \".25rem\"\n                }}\n              >\n                <div\n                  id=\"preview\"\n                  contentEditable=\"true\"\n                  dangerouslySetInnerHTML={{ __html: marked(markdown) }}\n                  style={{ minHeight: \"10em\" }}\n                ></div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}